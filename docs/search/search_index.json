{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-osmedeus","title":"What is Osmedeus?","text":"<p>Osmedeus is a Workflow Engine for Offensive Security that allows you to build and run a reconnaissance system on a wide range of targets, including domains, URLs, CIDRs, and GitHub repositories. It was designed to establish a strong foundation and has the ability to adapt and function automatically in order to perform reconnaissance tasks.</p>"},{"location":"#showcases","title":"Showcases","text":"<p>The Engine has successfully found a tremendous number of security vulnerabilities in many big companies out there with  My reconnaissance methodology </p> <p></p>"},{"location":"#gettting-started","title":"Gettting Started","text":"<p>Click here to know how to Installation Osmedeus</p> <p>Learn more about the Architecture of Osmedeus</p> <p>Demo Video can be found here</p>"},{"location":"#features","title":"Features","text":"<p> Significantly speed up your recon process   Organize your scan results    Efficiently to customize and optimize your recon process    Seamlessly integrate with new public and private tools    Easy to scale across large number of targets    Easy to synchronize the results across many places  </p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#manifest","title":"Manifest","text":"<p>The main philosophy of Osmedeus was never meant to be the that replace your tools or any other tools. It was designed to build a foundation with the capability and flexibility that allow you to make your recon system faster, cleaner and much more powerful.</p>"},{"location":"architecture/#the-structure-of-the-osmedeus","title":"The structure of the Osmedeus","text":"<p>The tool has two main components:</p> <ul> <li> The Core Engine, written in Golang, is responsible for handling complex logic and providing a range of built-in utilities to make running your workflow more efficient. It is a key component that helps to streamline and simplify the process.</li> <li> A Workflow is a set of YAML files that outline your methodology. It is a way to organize and document the steps involved in a process or task.</li> </ul> <p>Target can be domain, url, IP, CIDR or anything that fit your workflow.</p>"},{"location":"architecture/#comparison-to-the-old-version","title":"Comparison to the old version","text":""},{"location":"architecture/#how-does-osmedeus-actually-work","title":"How does Osmedeus actually work?","text":"<p>Osmedeus will take your input along with the selected flow/module to create a routine that contains a list of commands and logic to complete the scan.</p> <p>Behind the scene, it actually runs other 3rd party tools with a special logic generated by Osmedeus core.</p>"},{"location":"architecture/#detailed-overview-of-the-structure-of-the-osmedeus-engine","title":"Detailed overview of the structure of the Osmedeus Engine","text":""},{"location":"donation/","title":"Donation","text":"<p>If you love my tools and would like to support my work, please check out some donation methods below to get a premium package.</p>"},{"location":"donation/#sponsor","title":"Sponsor","text":"<p>If you or your organization are interested in sponsoring my projects or displaying your logo on the project documentation page, please reach out to me through the contact information  here</p>"},{"location":"donation/#for-everyone","title":"For Everyone","text":"<p> <p>Become a backer on opencollective and you will appear here. </p>"},{"location":"donation/#for-crypto-fan","title":"For Crypto Fan","text":"<pre><code>BTC (BTC): 13ErAZgB94ySq4d5yC1gjDfZEVXcqT3769\nBNB (BEP20): 0x15F2C20F30Ee89c61A2f46cD726910a27E359a2F\nBTC (ERC20): 0x055ff71344bcff0362c0eaf887439a73885da458\nETH (ERC20): 0x15F2C20F30Ee89c61A2f46cD726910a27E359a2F\nCRO (Cronos): 0x15F2C20F30Ee89c61A2f46cD726910a27E359a2F\nMATIC (Polygon): 0x15F2C20F30Ee89c61A2f46cD726910a27E359a2F\nFTM (Fantom): 0x15F2C20F30Ee89c61A2f46cD726910a27E359a2F\nAVAX (AVAX C-Chain): 0x15F2C20F30Ee89c61A2f46cD726910a27E359a2F\nCRO (Cronos): 0x8241C6F30c7D76eBC2251d770B1671dbDC9d215E\nUSDT (BEP20): 0xaFC10B8064fDD47D04F1bFd8E6Ab59334711cAE6\nUSDT (ERC20): 0x15F2C20F30Ee89c61A2f46cD726910a27E359a2F\nUSDC (ERC20): 0x055ff71344bcff0362c0eaf887439a73885da458\nUSDC (Solana): 73XybrFZN5HixnPvgT7YG3r7tVWh2rKZVmNZGuZPFJwi\nSOL (Solana): 6w4kMFhS61VGVvgxW29sdC3jnzbAFpP2Cpcd4UJXVSZc\n</code></pre>"},{"location":"donation/#for-people-in-my-local-country","title":"For People in My local country","text":""},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#premium-package-related-questions","title":"Premium Package Related Questions","text":"I love the Osmedeus Community version. Is there any premium subscription? <p>Please check out the premium package here</p> What will you get from the Osmedeus Premium Package? <p>You can see what included in the package in the premium package page</p> Does the premium package require a continuous subscription? <p>Currently, it's pay as you go. but I push the update every week, you might miss the latest version of it if you cancel the subscription.</p> Is there any different document for the Premium Package? <p>Nope, it's all right here</p> How do I know I'm using premium package or not? <p>You will see the phrase <code>\ud83d\udc8e Making use of the premium workflow</code> when runnning the health check command or the <code>osmedeus workflow</code> command.</p> Where can I get the private Jaeles signatures and the custom wordlists? <p>The premium package page already included everything from my private Jaeles signatures and the custom wordlists.</p> Where is your private signatures and wordlists in the premium package? <p>It's all included in the package. The install script will download it all for you. You can also see the details structure here.</p> How can I upgrade from Osmedeus Community to Premium Package? <p>Just run <code>rm -rf ~/osmedeus-base</code> first then run a install script from the premium package download page.</p> Does Osmedeus Support Windows or ARM based processor (M1 Macbook, Kali Nethunter, etc)? <p>Unfortunately, Osmedeus does not support Windows or ARM based processor. Please consider using WSL, Docker or Virtualization software to able to use Osmedeus on your machine. You can see the docker for ARM here</p> What are the donation tiers and how much should I donate to be eligible for the premium package? <p>You can join the Patreon here or here to see a private post that contains a download link for premium packages. After that you will be invited to the backer channel to get direct support then</p> How can I update my premium package? <p>Just run the install script for the premium package again and it will be updated.</p> Is there any different document for the Premium Package? <p>This is already included everything from my private Jaeles signatures and the custom wordlists.</p> How to Build docker file for a premium package? <p>Just change the <code>https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh</code> in Dockerfile to the install URL that I gave you.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":"How to setup the Osmedeus? <p>Please check out installation guide here </p> How can I determine which workflow to run for my target? <p>Please check out running your first scan here </p> I got some error while installing Osmedeus on my machine. How can I fix it? <p>Maybe run <code>sudo su</code> first and then run <code>rm -rf ~/osmedeus-base ~/.osmedeus</code> and then run the install script again to have a clean installation.</p> I got some <code>Permission denied</code> errors while installing Osmedeus on my machine even with <code>sudo</code>. How can I fix it? <p>Please run <code>rm -rf ~/osmedeus-base ~/.osmedeus</code> to clean up the old installation. Then run <code>sudo su</code> first and run the install script again.</p> What is the specification required to run Osmedeus? <p>I recommend using VPS since it takes a lot of network bandwidth, the minimum spec would be 1 CPU 2GB RAM. You can of course increase or decrease the threads in the workflow to make it work in any spec</p> How can I update my Osmedeus? Or having a clean install? <p>Just run the install script again and it will be updated. Or run <code>rm -rf /root/osmedeus-base /root/.osmedeus</code> first then run the install script if you want to have a fresh install.</p> Where can I find the result after the scan done? <p>All of your scan data store at <code>~/workspaces-osmedeus/</code></p> How do I know which workflow to run? <p>You can follow this page to see what workflow is fit to your workflow.</p> How can I conduct a standard scan while excluding specific domains that are considered out of scope? <p>Currently, I don't have any Out of scope handle but you can run the flow that discovery the subdomain first with these commands <pre><code>osmedeus scan -f fast -t google.com\nosmedeus scan -f subdomain-enum -t google.com\n</code></pre> then get the list of subdomain, filtering OOS by yourself then store it in a file like list-of-domains.txt finally run the scan on with a list of domains <code>osmedeus scan -f domains -t list-of-domains.txt</code></p> I got some errors while running the scan, what should I do? <p>You can use <code>osmedeus health</code> command to check if the install is okay or not.</p> Where I can get a live support? <p>You can Join Discord Server here to see if anyone can help</p> I have an awesome idea, How can I implement it in Osmedeus? <p>You can Join Discord Server here or contact me via  here to see if it worth to add.</p> I ran the scan but there's no vulnerability found? <p>It's simply that there's no vulnerability. It very much depends on your target.</p> How can I update the vulnerability database of Jaeles or Nuclei? <p>Just run the command <code>osmedeus update --vuln</code>.</p> How do I halt my scan and ensure that all the smaller tasks within it have been stopped? <p>Just press <code>Crtl + C</code> to stop the scan. Then run <code>osmedeus utils ps --osm --kill</code> to kill all the sub process.</p> Why was my scan stuck at portscan? <p>It will stay there because it got a sudo password prompt. Some special tools require root permission to run like nmap. Make sure you allow nmap can be run without sudo password prompt.</p> Why did my scan such as vulnerability scanning, port scanning, or content discovery take so long? <p>It's probably because the thing you put in was really big. Think about trying to run the content discovery againt 2000 different hosts. That's why it takes a long time.</p> <p>It's probably because your cloud provider or your home network limit your portscan. Try to run with <code>--debug</code> then you can manually check with the raw command that the portscan module actually running.</p> What is the difference between this flow/module to other flow/module? <ol> <li>Read the flow/module files to see what difference in them.</li> <li>Seriously, Read the flow/module files.</li> <li>Remember that you were warned twice about reading read the flow/module files.</li> <li>Just use diff comparison of each flow/module file and see what difference field mean here</li> </ol> Where should I put my token (Github, Shodan, etc)? <p>All you need to do is follow this guide to setup the token</p> How can I setup to send notification? <p>All you need to do is follow this guide to setup notification</p> I found a new tool that is pretty awesome. Can you add it in Osmedeus? <p>Yes, just follow this guide to add it to your workflow.</p> Why Osmedeus didn't find any vulnerability even when I scan it with the intentionally vulnerable app? <p>Again it very much depends on your target. Osmedeus really shine on large scope targets, not the single intentionally vulnerable web app. Just scan some random VDP then you will see the result. The reason it won't find any vulnerability on the intentionally vulnerable app is the vulnscan module won't support it. But you're always welcome to customize the workflow to do so.</p> Is it support Proxy? <p>Nope, natively it doesn't support proxy. But since the design of the tool is running other 3rd tools and a lot of them doesn't support proxy by default. I've already consider proxychains but it makes it extremely slow and broke a lot of things.</p> I run the cloud scan with <code>-c 1</code> why it's only spin up 1 vps? <p>It's only run in 1 vps because you only have 1 target run like <code>osmedeus cloud -c 2 -f general -t sample.com -t another.com</code> will run 2 vps.</p> I accidentally terminated the scan. How can I restart or resume it? <p>Just run the command again to start a fresh scan or run the same command with <code>--resume</code> flag to resume the scan if any reports file exist.</p> How can I stop the scan? Is there any way to resume it? <p>Yes, just press <code>Crtl + C</code> to stop the scan. To resume the scan you can run the same command with additional <code>--resume</code> flag but it's depend on <code>reports:</code> section in previous module complete or not to actually resume the scan.</p> I stop the scan with <code>Ctrl+C</code> in the middle of it. Is it possible to create a summary report? <p>Yes, you can the <code>osmedeus report</code> command will check the runtime file in workspace and will show what store in there.</p> How can I delete a workspace? <p>Just delete the workspace folder which is located at <code>~/workspaces-osmedeus/&lt;target-name-here&gt;</code> or run the command <code>osmedeus config delete -w &lt;workspace-name-here&gt;</code>.</p> Why you use multiple tools for the same purpose in your workflow? <p>I choose some tools over the others because they gave more accurate results. You can always manually test to see the result then decide which one is better. Of course, you are always welcome to customize your workflow to do so.</p> Does the X scan run tool Y or not? <ol> <li>Read the flow and module files to determine what a step actually runs</li> <li>Seriously, read the flow and module files.</li> <li>Remember that you were warned twice about reading the flow and module files.</li> <li>Search for the tool command in the workflow folder to confirm whether it is used or not (e.g: <code>rg -F 'jaeles' ~/osmedeus-base/workflow</code>)</li> </ol> <p>What is the <code>{{Binaries}}</code> in the workflow?</p> <p><code>{{Binaries}}</code> will be replaced with <code>~/osmedeus-base/binaries/</code> where I store all the binaries for running the workflow . If you already install it in your $PATH environment variable then you can just use the tool directly like <code>your-tool -t {{Target}}</code> instead of  <code>{{Binaries}}/your-tool -t {{Target}}</code></p> <p>What is the <code>{{Data}}</code> in the workflow?</p> <p><code>{{Data}}</code> will be replaced with <code>~/osmedeus-base/data/</code> where I store all the config and wordlist for running the workflow. You can always use the absolute path like <code>/root/osmedeus-base/data/wordlist/your-wordlist.txt</code> instead of <code>{{Data}}/wordlist/your-wordlist.txt</code></p> I already setup my notification, How do I know it will work? <p>Please run the command here <code>osmedeus scan -m ~/osmedeus-base/workflow/test/noti.yaml -t sample.com</code> to test your notification setup. If you received a message in your channel then it works.</p> My test notification is working fine, but I still didn't get any noti on the real scan? <p>It won't show any noti vuln data in your channel simply mean it's not found any vuln. Try to grab some urls with you know is for sure vulnerablie like Jenkins or Jira then run it with urls workflow like this <code>osmedeus scan -f urls -t list-of-vulnerable-url.txt</code> and you will see.</p> Why my home router crashed when running Osmedeus? <p>Again, I'm always recommend to run Osmedeus with vps to avoid these issue. If you really want to change the amass config then go to <code>~/osmedeus-base/data/amass-config/basic-config.yaml</code> and edit the <code>maximum_dns_queries</code>, and also change some massdns rate on the probing module.</p> Where can I find the password for the Web UI? <p>Please refer to this page to start a web server and get credentials. You may need to run this command <code>cat ~/.osmedeus/config.yaml | grep password</code></p> How can I keep the scan or the web UI running in the background? <p>The simplest way to do it is running the process under tmux session.</p> How can I run osmedeus in my home network without killing my Internet? <p>It is always recommended to run Osmedeus in VPS, but you can use the <code>--tactic</code> or <code>--threads-hold</code> slowdown your scan like example command below <pre><code>osmedeus scan --tactic gently -t target.com\nosmedeus scan --threads-hold=30 -f cidr -t 1.2.3.4/24\n</code></pre></p> What should I do if Osmedeus found a vulnerability X? <ol> <li>Read the vulnerability X description.</li> <li>Seriously, read the vulnerability X description.</li> <li>Remember that you were warned twice about reading the vulnerability X description.</li> <li>Search for that vulnerability X name.</li> <li>Manually verify the vulnerability X.</li> <li>Still no results? maybe this guide can help you.</li> </ol> Osmedeus found some vulnerable subdomains, but I am unable to access them? <p>It is often the case that the availability of a subdomain found during a scan may not be the same when you attempt to manually verify it. This depends on the target and can vary.</p> I consistently encounter the error message <code>bash: /root/osmedeus-base/token/osm-default.rc: No such file or directory</code> <p>please remove the line <code>$HOME/osmedeus-base/token/osm-default.rc</code> in your <code>~/.bashrc</code> or <code>~/.zshrc</code> file as the token config now has been move to <code>$HOME/osmedeus-base/token/osm-var.yaml</code> since v4.6.0</p>"},{"location":"installation/","title":"Installation","text":"<p>Follow this link to see a video instruction</p>"},{"location":"installation/#install-from-a-base-repository","title":"Install from a base repository","text":"<p>NOTE that you need some essential tools like <code>curl, wget, git, zip, tmux</code> and login as root to start</p> <pre><code>bash &lt;(curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh)\n</code></pre>"},{"location":"installation/#install-for-macos-experimental","title":"Install for MacOS (experimental)","text":"<p>NOTE that you need to install homebrew first.</p> <pre><code>bash &lt;(curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install-macos.sh)\n</code></pre> <p>Some other changes you might need to make if you're really want to use Osmedeus on MacOS</p>"},{"location":"installation/#install-from-source","title":"Install from source","text":"<p>You will need to configured <code>Go &gt;= 1.8</code> environment.</p> <pre><code># Install the base folder first, this will install some third party as well as golang \nbash &lt;(curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install-macos.sh)\n\n# clone the source code to your $GOPATH and build the golang project\ncd $GOPATH/src/github.com/ &amp;&amp; mkdir -p j3ssie\ngit clone https://github.com/j3ssie/osmedeus\ngo install\n</code></pre>"},{"location":"installation/#install-from-a-build-release","title":"Install from a build release","text":"<p>Make sure you login as root otherwise run <code>sudo su</code> first then put <code>build-osm.zip</code> to any folder (e.g: <code>/opt/</code>)</p> <pre><code>unzip -q build-osm.zip &amp;&amp; cd build-osm\n./build.sh\n\n# verify your installation with health command\nosmedeus health\n</code></pre>"},{"location":"installation/#using-docker","title":"Using Docker","text":"<p>Pull the Docker image by running <code>docker pull j3ssie/osmedeus</code> and follow this page for in depth usage.</p>"},{"location":"installation/#verify-the-installation-process","title":"Verify the installation process","text":"<p>Just run the command <code>osmedeus health</code>. If you see the content like a image below then it's mean the installation process has been success.</p> <p></p> <p>The installation process is still success if you see this message. It's just one of many  Premium features </p> <p><code>[-] Cloud config setup incorrectly. If you install osmedeus on a single machine then it's okay to ignore the cloud setup</code></p>"},{"location":"premium/","title":"What is Premium Package?","text":""},{"location":"premium/#how-much-does-it-cost","title":"How much does it cost?","text":"<p>You can start to join my Patreon starting at  5$ / month  to see a private post contains a installation guide for the Premium package</p> <p>You can also choose some   donation methods here  to get the premium package with minimum 5$</p> <p></p>"},{"location":"premium/#anatomy-of-the-private-workflow-my-methodology","title":"Anatomy of the private workflow (my methodology)","text":"<p>     What is it running behind the scene?</p>"},{"location":"premium/#git-storages-natively-supported","title":"Git Storages natively supported","text":"<p>Even though you can use Git Storages by writing your workflow. The premium workflow also comes with the storages script. All you need to do is set up your Gitlab repository.</p>"},{"location":"premium/#support-distributed-scan","title":"Support Distributed Scan","text":""},{"location":"premium/#details-structure-of-the-package","title":"Details structure of the package","text":""},{"location":"reference/","title":"Mentions","text":"<ul> <li> <p>Blackhat Arsenal Asia 2023 | Build Your Own Reconnaissance System with Osmedeus Workflow Engine</p> </li> <li> <p>Jason Haddix | The Bug Hunter's Methodology v4</p> </li> <li> <p>Hackerone | 100 Hacking Tools and Resources</p> </li> <li> <p>Hackerone | What is Vulnerability Scanning? [And How to Do It Right]</p> </li> <li> <p>Intigriti | Tool of the week on Bug Bytes #153</p> </li> <li> <p>Hacktricks | External Recon Methodology</p> </li> <li> <p>[tl;dr sec] #115: Build your own reconnaissance system with Osmedeus Engine</p> </li> <li> <p>Osmedeus on hakin9.org</p> </li> <li> <p>Automating Recon at scale using Osmedeus</p> </li> <li> <p>Scope Based Recon Methodology: Exploring Tactics for Smart Recon</p> </li> <li> <p>10 Top Vulnerability Scanners with Unique Features for Bug Bounty Hunters</p> </li> <li> <p>Mindmap of Osmedeus \ud83d\udca0 Premium Workflow</p> </li> <li> <p>Mindmap of Osmedeus General Workflow</p> </li> </ul>"},{"location":"workflow/","title":"Understand the workflow","text":"<p>Workflow is the core of the Osmedeus Engine which represents your methodology as YAML files.</p> <p></p> <p>All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work</p> <ul> <li>Module contains detail of multiple step.</li> <li>Flow contains multiple module and also define order how to run these modules.</li> <li>Step is smallest part of the Osmedeus routine.</li> </ul>"},{"location":"workflow/#example-flow","title":"Example Flow","text":""},{"location":"workflow/#general-flow","title":"General flow","text":"<pre><code>name: general\ndesc: run normal routine\ntype: general # this is a folder name that will contains module file\nvalidator: domain # validate the input provide from -t option\n\nroutines:\n- modules:\n- subdomain\n- modules:\n- probing\n- modules:\n- ssame\n- modules:\n- screenshot\n- modules: # these modules will be run in parallel\n- fingerprint\n- spider\n- sto\n- modules:  # these modules will be run in parallel\n- archive\n- ipspace\n- modules:\n- vulnscan\n- modules:\n- vhostscan\n- modules:\n- portscan\n- modules:\n- pdirbscan\n- modules:\n- dirbscan\n# push final result again\n- modules:\n- summary\n</code></pre>"},{"location":"workflow/#flow-with-custom-parameters","title":"Flow with custom parameters","text":"<pre><code>name: gently-extensive\ndesc: run extensive routine but with very low threads\ntype: general\nvalidator: domain\nforce-params: true\n\nparams:\n- subfinderThreads: \"20\"\n# probing\n- dnsThreads: \"300\"\n- httpThreads: \"30\"\n- massdnsRateBrute: \"300\"\n# screenshot\n- screenThreads: \"8\"\n# fingerprint &amp; spider\n- ssthreads: \"30\"\n- overviewThreads: '30'\n- stoThreads: '30'\n- spiderThreads: \"5\"\n\n# vulnscan\n- nucleiThreads: \"30\"\n- jaelesThreads: \"20\"\n# dirbscan\n- ffThreads: '20' # threads for single ffuf-scan\n- dirbThreads: '2' # how many ffuf run at the same time\n# portscan\n- ports: \"0-65535\"\n- rateRustScan: \"5000\"\n- nmapThreads: \"10\"\n\nroutines:\n- flow: 'extensive'\nmodules:\n- subdomain\n- flow: 'extensive'\nmodules:\n- probing\n- flow: 'extensive'\nmodules:\n- ssame\n- modules:\n- screenshot\n- modules:\n- sto\n- fingerprint\n- flow: 'extensive'\nmodules:\n- spider\n- archive\n- modules:\n- ipspace\n- modules:\n- vulnscan\n# - modules:\n#     - vhostscan\n\n- modules:\n- portscan\n- flow: 'extensive'\nmodules:\n- port-fingerprint\n- pvulnscan\n\n- flow: 'extensive'\nmodules:\n- dirbscan\n# push final result again\n- modules:\n- summary\n</code></pre>"},{"location":"workflow/#example-modules","title":"Example Modules","text":""},{"location":"workflow/#subdomain-module","title":"subdomain module","text":"<pre><code>name: subdomain\ndesc: Scanning for subdomain\n\nreport:\nfinal:\n- \"{{Output}}/subdomain/final-{{Workspace}}.txt\"\n- \"{{Output}}/subdomain/more-{{Workspace}}.txt\"\n\n# {{Output}} == {{Workspaces}} + {{Workspace}} but strip \"/\" char\npre_run:\n- CreateFolder(\"{{Storages}}/subdomain/{{Workspace}}/\")\n- CreateFolder(\"{{Storages}}/summary/{{Workspace}}/\")\n- CreateFolder(\"{{Output}}/subdomain/\")\n\nparams:\n- subthreads: \"50\"\n- amassTimeout: \"3h\"\n- amassConfig: \"{{Data}}/amass-config/basic-config.yaml\"\n\nsteps:\n- required:\n- \"{{Binaries}}/amass\"\n- \"{{Binaries}}/subfinder\"\n- \"{{Binaries}}/assetfinder\"\n- \"{{Binaries}}/findomain\"\ncommands: # these two commands will run in parallels\n- \"timeout -k 1m {{amassTimeout}} {{Binaries}}/amass enum -config {{amassConfig}} -silent -nocolor -d {{Target}} -o {{Output}}/subdomain/{{Workspace}}-raw-amass.txt &gt; /dev/null 2&gt;&amp;1\"\n- \"{{Binaries}}/assetfinder -subs-only {{Target}} &gt; {{Output}}/subdomain/{{Workspace}}-assetfinder.txt\"\n# these two commands will run in parallels\n- commands:\n- \"{{Binaries}}/findomain -u {{Output}}/subdomain/{{Workspace}}-findomain.txt -t {{Target}} &gt; /dev/null 2&gt;&amp;1\"\n- \"{{Binaries}}/subfinder -d {{Target}} -t {{subthreads}} -o {{Output}}/subdomain/{{Workspace}}-subfinder.txt &gt; /dev/null 2&gt;&amp;1\"\n\n# cleaning some result\n- scripts:\n- Append(\"{{Output}}/subdomain/sum-{{Workspace}}.txt\", \"{{Output}}/subdomain/{{Workspace}}-amass.txt\")\n- Append(\"{{Output}}/subdomain/sum-{{Workspace}}.txt\", \"{{Output}}/subdomain/{{Workspace}}-subfinder.txt\")\n- Append(\"{{Output}}/subdomain/sum-{{Workspace}}.txt\", \"{{Output}}/subdomain/{{Workspace}}-assetfinder.txt\")\n- Append(\"{{Output}}/subdomain/sum-{{Workspace}}.txt\", \"{{Output}}/subdomain/{{Workspace}}-findomain.txt\")\n# remove junk subdomain like sample@subdomain.com and 1-2-3.subdomain.com format\n- ExecCmd(\"cat {{Output}}/subdomain/sum-{{Workspace}}.txt | {{Binaries}}/cleansub -t '{{Target}}' &gt; {{Output}}/subdomain/final-{{Workspace}}.txt\")\n- scripts:\n- SortU(\"{{Output}}/subdomain/final-{{Workspace}}.txt\")\n\n# get more related domains\n- required:\n- \"{{Binaries}}/metabigor\"\n# assume you run 'osmedeus scan -t example.com' then {{Org}} == 'example'\ncommands:\n- \"echo '{{Org}}' | {{Binaries}}/metabigor cert --json -o {{Output}}/subdomain/more-json-{{Workspace}}.txt\"\nscripts:\n- ExecCmd(\"cat {{Output}}/subdomain/more-json-{{Workspace}}.txt | jq -r '.Domain' | sed 's/\\*.//g' | sort -u &gt; {{Output}}/subdomain/more-{{Workspace}}.txt\")\n\npost_run:\n# delete all files in workspaces folder except a file lists in report section\n- Cleaning(\"{{Output}}/subdomain/\")\n</code></pre>"},{"location":"workflow/#dirbscan-module","title":"dirbscan module","text":"<pre><code>name: dirbscan\ndesc: Run Dirbscan\n\nreport:\nfinal:\n- \"{{Output}}/directory/beautify-{{Workspace}}.txt\"\n- \"{{Output}}/directory/beautify-{{Workspace}}.csv\"\n\nparams:\n- httpFile: \"{{Output}}/probing/http-{{Workspace}}.txt\"\n- wordlists: \"{{Data}}/wordlists/content/small.txt\"\n- lines: \"20\"\n- ffThreads: '20' # threads for single site\n- dirbThreads: '10'\n- dlimit: '50000'\n- recursion: '0'\n- commitLength: '400'\n- chan: '#mics'\n- ffTimeout: '2h'\n- defaultUA: \"User-Agent: Mozilla/5.0 (compatible; Osmedeus/v4; +https://github.com/j3ssie/osmedeus)\"\n\npre_run:\n- CreateFolder(\"{{Output}}/directory\")\n\nsteps:\n# check if the size is too big, We don't want tons of garbage here\n- conditions:\n- \"FileLength('{{httpFile}}') &gt; {{dlimit}}\"\nscripts:\n- ErrPrintf(\"Filter\", \"Got input file greater than {{dlimit}} line\")\n- Exit(1)\n\n- required:\n- \"{{Binaries}}/ffuf\"\n- \"{{httpFile}}\"\nsource: \"{{httpFile}}\"\nthreads: '{{dirbThreads}}'\ncommands:\n- \"{{Binaries}}/ffuf -t {{ffThreads}} -H '{{defaultUA}}' -s -timeout 15 -ac -fc '429,403,404' -D -e 'asp,aspx,pl,php,html,htm,jsp,cgi' -of json -o {{Output}}/directory/raw-[[._id_]].json -u '[[.line]]/FUZZ' -w {{wordlists}}:FUZZ &gt;/dev/null 2&gt;&amp;1\"\n\n# clean up and generate beautify report\n- scripts:\n- ExecCmd(\"awk '{print}' {{Output}}/directory/raw-*.json &gt; {{Output}}/directory/summary-json-{{Workspace}}.txt\")\n- CleanFFUFJson(\"{{Output}}/directory/summary-json-{{Workspace}}.txt\", \"{{Output}}/directory/beautify-{{Workspace}}.csv\")\n- ExecCmd(\"cat {{Output}}/directory/beautify-{{Workspace}}.csv | {{Binaries}}/csvtk pretty --no-header-row -I -s ' | ' -W 75 &gt; {{Output}}/directory/beautify-{{Workspace}}.txt\")\n- TeleMessByFile(\"#dirb\", \"{{Output}}/directory/beautify-{{Workspace}}.txt\")\n- Cat('{{Output}}/directory/beautify-{{Workspace}}.txt')\n\npost_run:\n- TotalDirb(\"{{Output}}/directory/beautify-{{Workspace}}.txt\")\n</code></pre>"},{"location":"workflow/#step","title":"Step","text":"<p>Here are three different steps for running commands and scripts.</p>"},{"location":"workflow/#normal-step","title":"Normal Step","text":"<pre><code>steps: # all the steps will run in serial\n- commands: # unix command and it will be run in parallel\n- \"unix command 1 here\"\n- \"unix command 2 here\"\nscripts: - ExecCmd(\"unix command 3 heret\") # command 3 and 4 below it will be run in serial\n- ExecCmd(\"unix command 4 here\")\n- SortU(\"filename-here.txt\")\n</code></pre>"},{"location":"workflow/#step-with-conditions","title":"Step with conditions","text":"<pre><code>steps: # all the steps will run in serial\n- required: # Check if all the files exist or the step will not run\n- filename-1-here.txt\nconditions: # Boolean conditions check with built-in scripts\n- \"FileLength('filename.txt') &gt; 10000\"\n- Exit(1) # this will exit the module imeediately\ncommands: # unix command and it will be run in parallel\n- \"unix command 1 here\"\n- \"unix command 2 here\"\nscripts: - ExecCmd(\"unix command 3 heret\") # command 3 and 4 below it will be run in serial\n- ExecCmd(\"unix command 4 here\")\n- SortU(\"filename-here.txt\")\n- TeleMessByFile(\"#dirb\", \"beautify-{{Workspace}}.txt\")\n\n- required: # Check if all the files exist or the step will not run\n- filename-2-here.txt\nconditions: # Boolean conditions check with built-in scripts\n- \"FileLength('filename-2-here.txt') &gt; 10000\"\n## only run if conditions is false\nrcommands: # run in parallel\n- \"unix command 1 here\"\n- \"unix command 2 here\"\nrscripts:\n- ErrPrintf(\"Filter\", \"Got input file greater than 1000 line\")\n- Exit(1) # this will exit the module imeediately\n</code></pre>"},{"location":"workflow/#step-with-the-loop-using-source-tag-and-line-variable","title":"Step with the loop using <code>source:</code> tag and <code>[[.line]]</code> variable.","text":"<pre><code>steps:\n# variation 2 that will run the step but with input is each like of 'source' section\n- source: \"{{inputFile}}\" # source file to loop through\nthreads: '{{dirbThreads}}'\ncommands: # {{Binaries}} is the path to binaries which usually ~/osmedeus/binaries/ but you can use any tool inside your $PATH environment variable\n- \"{{Binaries}}/ffuf-mod -H 'X-Forwarded-For: 127.0.0.1' -t {{fthreads}} -recursion-depth {{recursion}} -D -e 'asp,aspx,php,html,htm,jsp,cgi' -timeout 15 -get-hash -ac -s -fc '429,404,400' -of json -o {{Output}}/directory/raw-[[._id_]].json -u '[[.line]]/FUZZ' -w {{wordlists}}:FUZZ\"\nscripts:\n- SortU(\"{{Storages}}/paths/{{Workspace}}/paths-{{Workspace}}.csv\")\n</code></pre>"},{"location":"installation/install-note/","title":"Installation Notes","text":""},{"location":"installation/install-note/#when-install-on-macos","title":"When install on MacOS","text":"<ul> <li>Some special tools require root permission to run like nmap. Make sure you allow nmap can be run without sudo password prompt.</li> </ul>"},{"location":"installation/install-note/#when-building-from-source-on-macos","title":"When building from source on MacOS","text":"<ul> <li>You might need to install a cross-complilers to be albe to build linux on mac here</li> </ul>"},{"location":"installation/install-note/#how-do-i-build-osmedeus-for-other-architectures-like-arm","title":"How do I build Osmedeus for other architectures like ARM?","text":"<p>You can build the osmedeus binary from source just fine like any other golang projects. But as the architecture of Osmedeus rely on other third party tools to run the workflow, you have to build those tools from source as well. </p> <p>You can easily tweak the install-macos.sh file to build the tools for your architecture if you understand what are you doing.</p>"},{"location":"installation/notification/","title":"Setup Notification","text":"<p>Note that this setup is Optional. You can still use the tool perfectly fine without it!</p> <p>You should only store your token in the <code>$HOME/osmedeus-base/token/osm-var.yaml</code> file. Modify the <code>~/.osmedeus/config.yaml</code> will work but you will lose your token when the next time you run the reload command.</p>"},{"location":"installation/notification/#notification-with-telegram","title":"Notification with Telegram","text":""},{"location":"installation/notification/#1-create-a-telegram-bot","title":"1. Create a Telegram Bot","text":"<p>     Follow this guide to generate your API token</p>"},{"location":"installation/notification/#2-create-a-telegram-channel","title":"2. Create a Telegram Channel","text":"<p>     Create a channel and add your bot to it. Keep it Public until you get the channel ID.</p>"},{"location":"installation/notification/#3-get-your-channel-id","title":"3. Get your channel ID","text":"<p>run the command below to get your channel ID (make sure you replace the <code>&lt;your-token&gt;</code> and <code>&lt;your-bot-URL-at-step-1&gt;</code> with your own):</p> <pre><code>curl 'https://api.telegram.org/bot5321597600:&lt;your-token&gt;/sendMessage?chat_id=@&lt;your-bot-URL-at-step-1&gt;&amp;text=hello'\n</code></pre> <p>the output will look like this</p> <p><pre><code>{\"ok\":true,\"result\":{\"message_id\":2,\"sender_chat\":{\"id\":-1001353928111,\"title\":\"your-osm-channel\",\"username\":\"yourOsmChannel\",\"type\":\"channel\"},\"chat\":{\"id\":-1001353928111,\"title\":\"your-osm-channel\",\"username\":\"yourOsmChannel\",\"type\":\"channel\"},\"date\":1650958729,\"text\":\"hello\"}}\n</code></pre> grab your channel ID from the <code>id</code> field. In this case, it should be <code>-1001353928111</code>.</p>"},{"location":"installation/notification/#4-put-your-bot-api-key-and-channel-id-in-the-homeosmedeus-basetokenosm-varyaml-file","title":"4. Put your bot API key and channel ID in the <code>$HOME/osmedeus-base/token/osm-var.yaml</code> file","text":"<p>Now add the API Key and channel ID to the <code>$HOME/osmedeus-base/token/osm-var.yaml</code> file.</p> <pre><code>## run this command to get channel ID: curl 'https://api.telegram.org/bot$TELEGRAM_API_TOKEN/sendMessage?chat_id=@osmpReports&amp;text=hello'\n## {\"ok\":true,\"result\":{\"message_id\":2,\"sender_chat\":{\"id\":-1001353928111,\"title\":\"your-osm-channel\",\"username\":\"yourOsmChannel\",\"type\":\"channel\"},\"chat\":{\"id\":-1001353928111,\"title\":\"your-osm-channel\",\"username\":\"yourOsmChannel\",\"type\":\"channel\"},\"date\":1650958729,\"text\":\"hello\"}}\n## --&gt; your channel ID is '-1001353928111'\n\nnotification:\nclient_name: CLIENT_NAME\nslack_diff_channel: SLACK_DIFF_CHANNEL\nslack_report_channel: SLACK_REPORT_CHANNEL\nslack_status_channel: SLACK_STATUS_CHANNEL\nslack_webhook: SLACK_WEBHOOK\ntelegram_channel: TELEGRAM_CHANNEL\ntelegram_dirb_channel: TELEGRAM_DIRB_CHANNEL\ntelegram_mics_channel: TELEGRAM_MICS_CHANNEL\ntelegram_report_channel: TELEGRAM_REPORT_CHANNEL\ntelegram_sensitive_channel: TELEGRAM_SENSITIVE_CHANNEL\ntelegram_status_channel: TELEGRAM_STATUS_CHANNEL\n\ntokens:\nGITHUB_TOKEN: GITHUB_TOKEN\nGITLAB_API_TOKEN: GITLAB_API_TOKEN\nSLACK_API_TOKEN: SLACK_API_TOKEN\nTELEGRAM_API_TOKEN: 1111111100:AAGx\n</code></pre> <p>You may also noticed that there are some telegram channels in the <code>osm-var.yaml</code> file. You can set all of them to the same channel ID for simplicity. </p> <p>But if you want to have more visibility, repeat steps 2 and 3 above to have more channel ID and add it to the <code>osm-var.yaml</code> file.</p>"},{"location":"installation/notification/#5-run-the-test-workflow-to-see-everything-is-working-fine","title":"5. Run the test workflow to see everything is working fine","text":"<pre><code>osmedeus scan -m ~/osmedeus-base/workflow/test/noti.yaml -t sample.com\n</code></pre> <p>Check your telegram channel to see any message is sent.</p>"},{"location":"installation/notification/#6-see-what-noti-scripts-use-in-the-workflow","title":"6. See what noti scripts use in the workflow.","text":"<p>By default the notification script already setup in the workflow, you will automatically see the notification when the scan is done.</p> <p>You can also search <code>TeleMessByFile</code> script in the workflow which will send the message as the content of a file to a specific channel.</p> <p>    Here is how the real results looks like.</p> <p>You can see more usage of notification scripts here </p> <pre><code>notification:\nclient_name: CLIENT_NAME\ntelegram_channel: TELEGRAM_CHANNEL\ntelegram_dirb_channel: TELEGRAM_DIRB_CHANNEL\ntelegram_mics_channel: TELEGRAM_MICS_CHANNEL\ntelegram_report_channel: TELEGRAM_REPORT_CHANNEL\ntelegram_sensitive_channel: TELEGRAM_SENSITIVE_CHANNEL\ntelegram_status_channel: TELEGRAM_STATUS_CHANNEL\n\n\n\n# this will send the file '{{Output}}/vuln/sensitive/sensitivescan-{{Workspace}}-{{TS}}.txt' to the channel TELEGRAM_SENSITIVE_CHANNEL above\n- TeleMessByFile(\"#sensitive\", \"{{Output}}/vuln/sensitive/sensitivescan-{{Workspace}}-{{TS}}.txt\")\n\n\n# this will send the file 'Start the scan {{Target}}' to the channel TELEGRAM_MICS_CHANNEL above \n- TeleMess(\"#mics\", \"Start the scan {{Target}}\")\n</code></pre>"},{"location":"installation/practical-usage/","title":"Practical Scan Usage Cheatshet - Ready to use workflow has been heavily tested in real world target.","text":"<p>You can slowdown or speedup the scan by provide a <code>--tactic</code> or <code>--threads-hole</code> command line flag?</p> <p>By default the threads hold for the workflow will equals of your number of CPUs, but you can change it by using <code>--threads-hold=20</code>. You can also use  <code>--tactic=gently</code> flag to slowdown or the <code>--tactic=aggressive</code> speedup the scan.</p> <p>To avoid encountering errors, it is important to ensure that the scan is executed using the correct input format.</p> <p>Default workflow sthat come with Osmedeus Premium Package are:</p> Input Type Flow Name Description Example Commands single tld (e.g: <code>example.com</code>) general (default) run normal routine <code>osmedeus scan -f general -t example.com</code> extensive run extensive routine with more in-depth module <code>osmedeus scan -f extensive -t example.com</code> vuln run fast routine with vuln scan <code>osmedeus scan -f vuln -t example.com</code> fast run fast routine for summary data <code>osmedeus scan -f fast -t example.com</code> subdomain-enum Running subdomain enumeration and dns resolving only <code>osmedeus scan -f subdomain-enum -t example.com</code> extensive-vuln run extensive vuln scan <code>osmedeus scan -f extensive-vuln -t example.com</code> a file contains a list of domains (line format: <code>example.com</code> or <code>sub.example.com</code>) domains run normal routine but without subdomain scan <code>osmedeus scan -f domains -t list-of-domains.txt</code> vuln-and-dirb directly run on vuln scan and directory scan on list of domains <code>osmedeus scan -f vuln-and-dirb -t list-of-http.txt</code> A file contains a list of URL urls Scanning for List of Domains, URLs or IP Address <code>osmedeus scan -f urls -t list-of-urls.txt</code> A file contains a list of CIDR or a single CIDR cidr Scan for CIDR File <code>osmedeus scan -f cidr -t /tmp/list_of_cidrs.txt</code> quick-cidr Scan for CIDR File but focus on common HTTP Ports <code>osmedeus scan -f quick-cidr -t 1.2.3.4/24</code> or <code>osmedeus scan -f quick-cidr -t list-of-cidr.txt</code>"},{"location":"installation/practical-usage/#what-is-it-running-behind-the-scene","title":"What is it running behind the scene?","text":"<p>     By default the tool will run a general workflow from this page.</p>"},{"location":"installation/running-your-first-scan/","title":"Running Your First Scan","text":"<p>  Some tips before you start the scan</p> <p>You can slowdown or speedup the scan by provide a <code>--tactic</code> or <code>--threads-hole</code> command line flag?</p> <p>By default the threads hold for the workflow will equals of your number of CPUs, but you can change it by using <code>--threads-hold=20</code>. You can also use  <code>--tactic=gently</code> flag to slowdown or the <code>--tactic=aggressive</code> speedup the scan.</p> <p>for example: <code>osmedeus scan --threads-hold=10 -t example.com</code></p> <p>Running the command <code>osmedeus workflow ls</code> to show full workflow, <code>osmedeus workflow view -f general</code> to show the detailed about the workflow and <code>osmedeus scan -hh</code> to see the full help of the scan command</p> <p>To avoid encountering errors, it is important to ensure that the scan is executed using the correct input format.</p>"},{"location":"installation/running-your-first-scan/#if-you-workflow-is-a-domain-or-a-list-of-subdomains","title":"If you workflow is a domain or a list of subdomains","text":"<p> Example inputs: <code>example.com</code> , <code>target.co.uk</code></p> <p>If your input is <code>sub.example.com</code> and you are aware that there are not many subdomains associated with it (such as <code>another.sub.example.com</code>), then it may be more advantageous to employ a different workflow.</p> <p>1. If you desire a comprehensive scan that encompasses subdomain enumeration, DNS probing, and vulnerability scanning</p> <p> Example commands <pre><code># running default flow -f 'general'\nosmedeus scan -t example.com\n\n# Running extensive reconnaissance routine with in-depth module + bigger wordlists\nosmedeus scan -f extensive -t example.com\n</code></pre></p> <p>2. If you desire to perform a quick summary data analysis to get subdomain and DNS probing only</p> <p> Example commands <pre><code>osmedeus scan -f fast -t example.com\n\n# only run subdomain enumeration\nosmedeus scan -f subdomain-enum -t example.com\n\nosmedeus scan -m brutefocing-subdomain -t example.com\n</code></pre></p> <p>3. If you desire to perform a rapid routine and conducting a vulnerability scan on ity</p> <p> Example commands</p> <pre><code>osmedeus scan -f vuln -t example.com\n</code></pre>"},{"location":"installation/running-your-first-scan/#if-you-workflow-is-a-url-or-a-list-of-urls","title":"If you workflow is a URL or a list of URLs","text":"<p> Example inputs: Your input is a file that includes a catalog of URLs or IP addresses, along with subdomains such as <code>https://sub.example.com</code> , <code>internal.app.example.com</code>, <code>https://evil.com/path</code>, <code>https://1.2.3.4</code>, <code>3.4.5.6</code>, etc</p> <p>The workflows listed below solely permit input in the form of a file. If your input is not in the file format, kindly arrange it in a file prior to execution.</p> <p> Example commands</p> <pre><code>osmedeus scan -f urls -t list-of-urls.txt\n\n# This will automatically convert the input into a file named http-sub.example.com.txt\nosmedeus scan -f urls -t https://sub.example.com/\n\nosmedeus scan -f domains -t list-of-domains.txt\n\n# using with module\nosmedeus scan -m http-probing -t list-of-domains.txt\n\nosmedeus scan -m vuln-scan -t list-of-domains.txt\n\nosmedeus scan -m content-discovery -t list-of-domains.txt\nosmedeus scan -m content-discovery -t list-of-urls.txt\n</code></pre>"},{"location":"installation/running-your-first-scan/#if-you-workflow-is-a-cidr-or-a-list-of-cidrs","title":"If you workflow is a CIDR or a list of CIDRs","text":"<p> Example inputs: Your input is a file that includes a catalog of IP addresses, CIDR such as <code>1.2.3.4/24</code> , <code>3.4.5.6</code>, etc or a simple CIDR like <code>1.2.3.4/24</code></p> <p> Example commands</p> <pre><code>osmedeus scan -f cidr -t list-of-cidr.txt\n\n# This will automatically convert the input into a file named 1.2.3.4/24_random.txt\nosmedeus scan -f cidr -t 1.2.3.4/24\n\n\nosmedeus scan -f cidr-probing -t 3.4.5.6/24\n</code></pre>"},{"location":"installation/running-your-first-scan/#if-you-workflow-is-a-githubgitlab-repo-or-a-folder-of-source","title":"If you workflow is a github/gitlab repo or a folder of source","text":"<p> Example inputs: <code>https://github.com/juice-shop/juice-shop</code> (only apply for GitHub or GitLab link), <code>/tmp/source-code-folder</code></p> <p> Example commands</p> <pre><code># Please be aware that this functionality only operates with repository URLs such as those from GitHub or GitLab.\nosmedeus scan -m repo-scan -t https://github.com/juice-shop/juice-shop\n\nosmedeus scan -m repo-scan -t /tmp/source-code-folder\n\nosmedeus scan -m repo-scan -T list-of-repos.txt\n</code></pre>"},{"location":"installation/running-your-first-scan/#view-of-all-toggleable-and-skippable-parameters-in-the-workflow","title":"View of all toggleable and skippable parameters in the workflow.","text":""},{"location":"installation/token/","title":"Setup Token & API Key","text":"<p>Note that this setup is Optional. You can still use the tool perfectly fine without it!</p> <p>There are some places that tokens will store in Osmedeus below</p> <ul> <li> <p> Amass config files <code>~/osmedeus-base/data/amass-config/datasources.yaml</code> at  <code>~/osmedeus-base/data/configs/</code> which is mainly responsible for the subdomain enumeration.</p> </li> <li> <p> Main tokens file <code>~/osmedeus-base/token/osm-var.yaml</code> </p> </li> </ul>"},{"location":"installation/token/#amass-config","title":"Amass config","text":"<p>All your tokens, such as Shodan, Censys, SecurityTrails, and others are store in <code>~/osmedeus-base/data/amass-config/datasources.yaml</code>.  You can begin making modifications to the configuration there to utilize third-party services while using Osmedeus.</p>"},{"location":"installation/token/#any-other-tokens","title":"Any other tokens","text":"<p>Any other config that require to change to get more is store <code>~/osmedeus-base/token/osm-var.yaml</code>.</p> <p>The primary section for storing your API keys can be found in the <code>token:</code> section, as shown below. When you run the Osmedeus scan, it will automatically load these keys into your operating system environment</p> <pre><code>tokens:\nGITHUB_TOKEN: GITHUB_TOKEN\nGITLAB_API_TOKEN: GITLAB_API_TOKEN\nSLACK_API_TOKEN: SLACK_API_TOKEN\nTELEGRAM_API_TOKEN: TELEGRAM_API_TOKEN\n</code></pre> <p>For example <code>GITHUB_TOKEN</code> used by github-subdomains tools to get more subdomains.</p>"},{"location":"installation/usage/","title":"Usage - Full usage message","text":""},{"location":"installation/usage/#practical-usage-with-examples-commands","title":"Practical Usage with examples commands","text":"<pre><code>## Start a simple scan with default 'general' flow\nosmedeus scan -t sample.com\n\n## Start a general scan but exclude some of the module\nosmedeus scan -t sample.com -x screenshot -x spider\n\n## Start a scan directly with a module with inputs as a list of http domains like this https://sub.example.com\nosmedeus scan -m content-discovery -t http-file.txt\n\n## Initiate the scan using a speed option other than the default setting\nosmedeus scan -f vuln --tactic gently -t sample.com\nosmedeus scan --threads-hold=10 -t sample.com\n\n## Start a simple scan with other flow\nosmedeus scan -f vuln -t sample.com\nosmedeus scan -f extensive -t sample.com -t another.com\nosmedeus scan -f urls -t list-of-urls.txt\n\n## Scan list of targets\nosmedeus scan -T list_of_targets.txt\nosmedeus scan -f vuln -T list-of-targets.txt\n\n## Performing static vulnerability scan and secret scan on a git repo\nosmedeus scan -m repo-scan -t https://github.com/j3ssie/sample-repo\nosmedeus scan -m repo-scan -T list-of-repo.txt\n\n## Scan for CIDR with file contains CIDR with the format '1.2.3.4/24'\nosmedeus scan -f cidr -t list-of-ciders.txt\nosmedeus scan -f cidr -t '1.2.3.4/24' # this will auto convert the single input to the file and run\n\n## Directly run on vuln scan and directory scan on list of domains\nosmedeus scan -f domains -t list-of-domains.txt\nosmedeus scan -f vuln-and-dirb -t list-of-domains.txt\n\n## Use a custom wordlist\nosmedeus scan -t sample.com -p 'wordlists={{Data}}/wordlists/content/big.txt'\n\n## Use a custom wordlist\ncat list_of_targets.txt | osmedeus scan -c 2\n\n## Start a normal scan and backup entire workflow folder to the backup folder\nosmedeus scan --backup -f domains -t list-of-subdomains.txt\n\n## Start the scan with chunk inputs to review the output way more much faster\nosmedeus scan --chunk --chunk-parts 20 -f cidr -t list-of-100-cidr.txt\n\n## Continuously run the scan on a target right after it finished\nosmedeus utils cron --for --cmd 'osmedeus scan -t example.com'\n\n\ud83d\udca1 For full help message, please run: osmedeus scan --hh\n</code></pre>"},{"location":"installation/usage/#help-help-about-any-command","title":"help - help about any command","text":"<pre><code>osmedeus help\nosmedeus --hh\nosmedeus scan help\nosmedeus cloud help\n</code></pre>"},{"location":"installation/usage/#scan-actually-start-a-scan-based-on-predefined-workflow","title":"scan - Actually start a scan based on predefined workflow","text":"<pre><code># Scan Usage:\nosmedeus scan -f [flowName] -t [target]\nosmedeus scan -m [modulePath] -T [targetsFile]\nosmedeus scan -f /path/to/flow.yaml -t [target]\nosmedeus scan -m /path/to/module.yaml -t [target] --params 'port=9200'\nosmedeus scan -m /path/to/module.yaml -t [target] -l /tmp/log.log\nosmedeus scan --tactic aggressive -m module -t [target]\ncat targets | osmedeus scan -f sample\n\n# Practical Scan Usage:\nosmedeus scan -T list_of_targets.txt -W custom_workspaces\nosmedeus scan -t target.com -w workspace_name --debug\nosmedeus scan -f general -t sample.com\nosmedeus scan --tactic aggressive -f general -t sample.com\nosmedeus scan -f extensive -t sample.com -t another.com\ncat list_of_urls.txt | osmedeus scan -f urls\nosmedeus scan --threads-hold=15 -f cidr -t 1.2.3.4/24\nosmedeus scan -m ~/.osmedeus/core/workflow/test/dirbscan.yaml -t list_of_urls.txt\nosmedeus scan --wfFolder ~/custom-workflow/ -f your-custom-workflow -t list_of_urls.txt\nosmedeus scan --chunk --chunk-part 40 -c 2 -f cidr -t list-of-cidr.txt\n</code></pre>"},{"location":"installation/usage/#cloud-run-scan-in-distributed-cloud-mode","title":"cloud - Run scan in Distributed Cloud mode","text":"<pre><code># Cloud Usage\nosmedeus cloud -f [flowName] -t [target]\nosmedeus cloud -f [flowName] -T [targetFile] --no-del\nosmedeus cloud -m [modulePath] -t [target]\nosmedeus cloud -c 5 -f [flowName] -T [targetsFile]\nosmedeus cloud --token xxx -c 5 -f [flowName] -T [targetsFile]\nosmedeus cloud --chunk -c 5 -f [flowName] -t [targetsFile]\n</code></pre>"},{"location":"installation/usage/#provider-cloud-utils-for-distributed-mode","title":"provider - Cloud utils for Distributed Mode","text":"<pre><code># Provider Usage\nosmedeus provider wizard\nosmedeus provider validate\nosmedeus provider build --token xxx --rebuild --ic\nosmedeus provider health --debug\nosmedeus provider health --for\nosmedeus provider create --name 'sample'\nosmedeus provider delete --id 34317111 --id 34317112\nosmedeus provider list\nosmedeus provider clear\n</code></pre>"},{"location":"installation/usage/#queue-running-the-scan-with-input-from-queue-file","title":"queue - Running the scan with input from queue file","text":"<pre><code>osmedeus queue -Q /tmp/queue-file.txt -c 2\nosmedeus queue --add -t example.com -Q /tmp/queue-file.txt\n</code></pre>"},{"location":"installation/usage/#server-start-web-ui-server","title":"server - Start web UI server","text":"<pre><code>osmedeus server --port 9000\nosmedeus server -A --disable-ssl\n</code></pre>"},{"location":"installation/usage/#utils-utility-to-get-some-information-from-the-system","title":"utils - Utility to get some information from the system","text":"<pre><code>osmedeus version --json\n## Update utilities\nosmedeus update\nosmedeus update --vuln\nosmedeus update --force --clean\n## Other utilities\nosmedeus utils tmux ls\nosmedeus utils tmux logs -A -l 10\nosmedeus utils ps\nosmedeus utils ps --osm\nosmedeus utils ps --osm --kill\nosmedeus utils ps --proc 'jaeles'\nosmedeus utils cron --cmd 'osmdeus scan -t example.com' --sch 60\nosmedeus utils cron --for --cmd 'osmedeus scan -t example.com'\nosmedeus utils workflow\nosmedeus config set --threads-hold=10\n</code></pre>"},{"location":"installation/usage/#health-run-diagnostics-to-check-configurations","title":"health - Run diagnostics to check configurations","text":"<pre><code>osmedeus health\nosmedeus health cloud --debug\nosmedeus health git --debug\n</code></pre>"},{"location":"installation/usage/#queue-running-the-scan-with-input-from-queue-file_1","title":"queue - Running the scan with input from queue file","text":"<pre><code># Report Usage\nosmedeus queue -Q /tmp/queue-file.txt -c 2\nosmedeus queue --add -t example.com -Q /tmp/queue-file.txt\n</code></pre>"},{"location":"installation/usage/#report-show-report-of-existing-workspace","title":"report - Show report of existing workspace","text":"<pre><code># Report Usage\nosmedeus report list\nosmedeus report extract -t target.com.tar.gz\nosmedeus report extract -t target.com.tar.gz --dest .\nosmedeus report compress -t target.com\nosmedeus report view --raw -t target.com\nosmedeus report view --static -t target.com\nosmedeus report view --static --ip 0 -t target.com\n</code></pre>"},{"location":"installation/using-docker/","title":"Using Docker","text":""},{"location":"installation/using-docker/#building-docker-image","title":"Building docker image","text":"<p>How to Build docker file for the premium package?</p> <p>Just change the <code>https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh</code> in <code>Dockerfile</code> to the install URL that I gave you.</p> <pre><code>git clone --depth=1 git@github.com:osmedeus/osmedeus-base.git\ncd osmedeus-base/\ndocker build -t j3ssie/osmedeus:latest .\n</code></pre>"},{"location":"installation/using-docker/#running-the-scan","title":"Running the scan","text":"<pre><code># create a volume with name `osmws` first, if you want to keep workspace data\ndocker volume create osmws\n\n# run the scan\ndocker run -it --rm -v osmws:/root/.osmedeus/workspaces j3ssie/osmedeus:latest scan -f fast -t sample.com\n\n\n# access the docker via bash if you want to see a raw result of the previous or current scan\ndocker ps\n\ndocker exec -it &lt;container-id&gt; /bin/bash\n</code></pre>"},{"location":"installation/using-docker/#run-the-web-ui","title":"Run the Web UI","text":"<p>Note that <code>osmedeus-scanner</code> is just the name, you can use anything you want</p> <pre><code>## Start the web server\ndocker run -d --name osmedeus-scanner -v osmws:/root/.osmedeus/workspaces -p 8000:8000 j3ssie/osmedeus:latest server\n\n## grepping for password\ndocker exec -it osmedeus-scanner -v osmws:/root/.osmedeus/workspaces grep password /root/.osmedeus/config.yaml | head -1\n</code></pre>"},{"location":"installation/web-ui/","title":"Web UI (Experimental)","text":""},{"location":"installation/web-ui/#start-a-web-server","title":"Start a web server","text":"<p>Open a new terminal or tmux and run</p> <pre><code>osmedeus server\n</code></pre> <p>The server will be avaliable at HTTPS URL here: <code>https://your-vps-ip:8000/ui/</code></p> <p></p> <p>Then get the credentials from this file.</p> <p><pre><code>cat ~/.osmedeus/config.yaml\n\n...\nclient:\n  password: xxxx\n  username: osmedeus\n...\n</code></pre> </p> <p></p>"},{"location":"installation/web-ui/#view-results-in-your-workspace-via-static-path","title":"View results in your workspace via static path","text":"<p>NOTE that this static path doesn't require authentication. Be careful when you exposed this prefix to other people.</p> <p>By default, the webserver will allow you to view your workspace folder as a static file via the endpoints <code>/random-prefix-here/workspaces/</code>.</p> <p>You can see the detail below.</p> <pre><code>cat ~/.osmedeus/config.yaml\n\nserver:\n  ...\n  prefix: random-prefix-here\n  ...\n\n\ncurl -k https://your-webserver:8000/random-prefix-here/workspaces/sample.com/subdomain/final-sample.com.txt\n</code></pre>"},{"location":"premium/cloud-setup/","title":"Cloud config for distributed scan","text":"<p>This is only available in the premium package</p> <p>Currently only these providers are supported: AWS, DigitalOcean, Linode</p>"},{"location":"premium/cloud-setup/#here-is-how-the-scan-looks-like","title":"Here is how the scan looks like","text":""},{"location":"premium/cloud-setup/#setup-with-the-wizard","title":"Setup with the wizard","text":"<p>Just run <code>osmedeus provider wizard</code> then fill your API keys, press enter to use default value.</p> <p></p> <p>You can also do some other actions to your provider with <code>osmedeus provider</code> command</p> <p></p>"},{"location":"premium/cloud-setup/#manual-setup","title":"Manual Setup","text":""},{"location":"premium/cloud-setup/#1-create-api-key-denpend-on-your-cloud-provider","title":"1. Create API Key denpend on your cloud provider","text":"<p>First of all, you will need your token store in <code>~/osmedeus-base/cloud/provider.yaml</code> as the format below.</p> <p>Currently, Osmedeus only support AWS, Digital Ocean and Linode provider.  </p> <p></p>"},{"location":"premium/cloud-setup/#2-create-both-public-and-private-ssh-key","title":"2. Create both public and private SSH Key","text":"<pre><code># This will auto generate the SSH Key if it not found it yet\nosmedeus health cloud --debug\n</code></pre>"},{"location":"premium/cloud-setup/#3-create-a-snapshot-with-the-build-command","title":"3. Create a snapshot with the build command","text":"<p>This will need packer v1.7.8 installed on your machine.</p> <pre><code>osmedeus provider build --rebuild\n\n# or enable debug mode to see what's going on\nosmedeus provider build --rebuild --debug\n</code></pre> <p>the result of the command should look like this</p> <p></p> <p>If you have any error make sure to check the content of these first</p> <ul> <li> your api key is in <code>~/osmedeus-base/cloud/provider.yaml</code>.</li> <li> run <code>osmedeus config reload</code> to make sure everything loaded.</li> <li> <code>ls /root/osmedeus-base/cloud/ssh/cloud</code> have two SSH Keys.</li> <li> packer v1.7.8 is ready on your host machine.</li> </ul>"},{"location":"premium/git-setup/","title":"Git Setup for Premium Package","text":"<p>This feature is quite complex and only available in the premium package. Make sure you understand to tools and its concept of it first</p> <p>Note that this setup is Optional. You can still use the tool perfectly fine without it!</p>"},{"location":"premium/git-setup/#setup-storages","title":"Setup Storages","text":"<p>Check out the Private Playlist on the #backer channel in Discord to see a Video Instruction.</p>"},{"location":"premium/git-setup/#1-modify-the-storages-section-in-the-token-file-at-osmedeus-basetokenosm-varyaml","title":"1. Modify the <code>storages:</code> section in the token file at <code>~/osmedeus-base/token/osm-var.yaml</code>","text":"<p>Run these commands below if you not using git before</p> <pre><code>git config --global user.name \"your_gitlab_user\"\ngit config --global user.email \"your_gitlab_uid@users.noreply.gitlab.com\"\n</code></pre>"},{"location":"premium/git-setup/#the-content-of-storages-looks-like-below","title":"The content of storages looks like below","text":"<pre><code>storages:\nassets_repo: ASSETS_REPO\nassets_storage: ~/.osmedeus/storages/assets\nhttp_repo: HTTP_REPO\nhttp_storage: ~/.osmedeus/storages/http\nmics_repo: MICS_REPO\nmics_storage: ~/.osmedeus/storages/mics\npaths_repo: PATHS_REPO\npaths_storage: ~/.osmedeus/storages/paths\nports_repo: PORTS_REPO\nports_storage: ~/.osmedeus/storages/ports\nsecret_key: SECRET_KEY\nsubdomain_repo: SUBDOMAIN_REPO\nsubdomain_storage: ~/.osmedeus/storages/subdomain\nsummary_repo: git@gitlab.com:your_gitlab_username/dosm-summary.git\nsummary_storage: ~/.osmedeus/storages/summary\nvuln_repo: VULN_REPO\nvuln_storage: ~/.osmedeus/storages/vuln\n</code></pre> <p>Kindly note that you are not required to configure all the repositories and destinations for this. Typically, I only utilize three repositories: summary_repo, paths_repo, and vuln_repo.</p> <p>You'll be required to make adjustments to certain values listed below. - [x] Change the <code>SECRET_KEY</code> to the path of your secret key that can do the push/pull to your git repo. - [x] Change the <code>your_gitlab_username</code> to your Gitlab user name - [x] Change the <code>SUMMARY_REPO</code> or <code>git@gitlab.com:your_gitlab_username/dosm-summary.git</code> to your Gitlab repo.</p>"},{"location":"premium/git-setup/#understand-the-storages-config-pair","title":"Understand the storages config pair","text":"<p>The <code>summary_repo</code> and <code>summary_storage</code> are closely linked, and the same concept applies to the other pairs, such as <code>vuln_repo</code> and <code>vuln_storage</code>. - <code>summary_storage</code> is a local folder in your instance and in this case it will be <code>~/.osmedeus/storages/summary</code> - <code>summary_repo</code> is your gitlab repository and in this case <code>git@gitlab.com:your_gitlab_username/dosm-summary.git</code>. This repo will be clone to the your local machine and after you put everything in that folder </p> <p>Once you've configured the Git storages, the workflow will manage how data is copied/appended to the local folder and subsequently push the latest changes to your repository.</p> <pre><code>  - scripts:\n# This will copy the the output of probing module to \n- ExecCmd(\"cp {{Output}}/probing/dns-{{Workspace}}.txt {{Storages}}/summary/{{Workspace}}/dns-{{Workspace}}.txt\")\n# This will do a git push to `git@gitlab.com:your_gitlab_username/dosm-summary.git` repository\n- PushFolder(\"{{Storages}}/summary/\")\n</code></pre>"},{"location":"premium/git-setup/#2-reload-the-config-to-clone-repo","title":"2. Reload the config to clone repo","text":"<pre><code># reload config to cloning the repo\nosmedeus config check\n\n# then check out your storages folder at `~/.osmedeus/storages/summary`\nls ~/.osmedeus/storages/summary/ </code></pre>"},{"location":"premium/install-premium-package/","title":"How to Install the Premium Package?","text":"<p>It's very simple. Once your donation is completed. Send me an DM on Discord or Twitter then you will be invited to the exclusive Discord Channel and get an one-liner to install it.</p> <p></p>"},{"location":"premium/install-premium-package/#what-does-the-install-script-actually-do","title":"What does the install script actually do?","text":"<p>Well just look at the content of the script.</p>"},{"location":"workflow/customize-your-own-workflow/","title":"Customize your own workflow","text":"<p>All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work</p> <p>What is the <code>{{Binaries}}</code> in the workflow?</p> <p><code>{{Binaries}}</code> will be replaced with <code>~/osmedeus/binaries/</code> where I store all the binaries for running the workflow . If you already install it in your $PATH environment variable then you can just use the tool directly like <code>your-tool -t {{Target}}</code> instead of  <code>{{Binaries}}/your-tool -t {{Target}}</code></p> <p>After the installation process is finished, your workflow will be stored at <code>~/osmedeus-base/workflow</code>.</p>"},{"location":"workflow/customize-your-own-workflow/#1-tweaking-commands-or-threads-of-the-tool-depends-on-your-machine-specification","title":"1. Tweaking commands or threads of the tool depends on your machine specification","text":"<p>You can start tweaking the workflow right away by edit any command in module file at <code>~/osmedeus-base/workflow/general/</code> folder.</p> <p>For example you can edit the thread of ffuf command here on dirbscan module</p> <pre><code># --snippet--\n\nparams:\n- inputFile: \"{{Output}}/probing/http-{{Workspace}}.txt\"\n### You can start customizing the command here with the wordlist or the threads of ffuf tool\n- wordlists: \"{{Data}}/wordlists/content/small.txt\"\n- ffThreads: '20' # threads for single site\n### \n- dirbThreads: '10'\n- lines: \"20\"\n- dlimit: '50000'\n- recursion: '0'\n- commitLength: '400'\n- chan: '#mics'\n\npre_run:\n- CreateFolder(\"{{Output}}/directory\")\n\nsteps:\n# check if the size is too big, We don't want tons of garbage here\n- conditions:\n- \"FileLength('{{inputFile}}') &gt; {{dlimit}}\"\nscripts:\n- ErrPrintf(\"Filter\", \"Got input file greater than {{dlimit}} line\")\n- Exit(1)\n\n- required:\n- \"{{Binaries}}/ffuf\"\n- \"{{inputFile}}\"\nsource: \"{{inputFile}}\"\nthreads: '{{dirbThreads}}'\ncommands:\n- \"{{Binaries}}/ffuf -t {{ffThreads}} -timeout 15 -ac -fc '429,403,404' -D -e 'asp,aspx,pl,php,html,htm,jsp,cgi' -of json -o {{Output}}/directory/raw-[[._id_]].json -u '[[.line]]/FUZZ' -w {{wordlists}}:FUZZ\"\n\n# --snippet--\n</code></pre> <p>You can also use the <code>force-params: true</code> in flow file to override the threads in module file like this flow</p> <pre><code>name: gently-extensive\ndesc: run extensive routine but with very low threads\ntype: general\nvalidator: domain\nforce-params: true\n\nparams:\n- subfinderThreads: \"20\"\n# probing\n- dnsThreads: \"300\"\n- httpThreads: \"30\"\n- massdnsRateBrute: \"300\"\n# screenshot\n- screenThreads: \"8\"\n# fingerprint &amp; spider\n- ssthreads: \"30\"\n- overviewThreads: '30'\n- stoThreads: '30'\n- spiderThreads: \"5\"\n\n# vulnscan\n- nucleiThreads: \"30\"\n- jaelesThreads: \"20\"\n# dirbscan\n- ffThreads: '20' # threads for single ffuf-scan\n- dirbThreads: '2' # how many ffuf run at the same time\n# portscan\n- ports: \"0-65535\"\n- rateRustScan: \"5000\"\n- nmapThreads: \"10\"\n\nroutines:\n- flow: 'extensive'\nmodules:\n- subdomain\n- flow: 'extensive'\nmodules:\n- probing\n- flow: 'extensive'\nmodules:\n- ssame\n- modules:\n- screenshot\n- modules:\n- sto\n- fingerprint\n- flow: 'extensive'\nmodules:\n- spider\n- archive\n- modules:\n- ipspace\n- modules:\n- vulnscan\n\n- modules:\n- portscan\n\n- flow: 'extensive'\nmodules:\n- dirbscan\n\n- flow: 'extensive'\nmodules:\n- port-fingerprint\n- pvulnscan # doing vulnscan + dirbscan on portscan result too\n</code></pre>"},{"location":"workflow/customize-your-own-workflow/#2-fork-another-one-from-community-workflow","title":"2. Fork another one from community workflow","text":"<p>Fork this repo from here https://github.com/osmedeus/osmedeus-workflow and change anything you want and put it to <code>~/osmedeus-base/workflow</code> folder.</p> <p>or you can put it in a custom folder then use this command.</p> <pre><code>osmedeus scan --wfFolder ~/custom-workflow/ -f your-custom-workflow -t sample.com\n</code></pre>"},{"location":"workflow/customize-your-own-workflow/#3-add-your-new-tool-to-existing-workflow","title":"3. Add your new tool to existing workflow","text":"<p>For example, you have a new tool for subdomain enumeration called <code>awesome-subdomain-enum</code> and the usage of it is like <code>awesome-subdomain-enum -t sample.com -o output.txt</code>.</p> <p>You can easily add it to the existing workflow by adding the following command <code>awesome-subdomain-enum -t {{Target}} &gt;&gt; {{Output}}/subdomain/sum-{{Workspace}}.txt</code> to the subdomain.yaml file at <code>~/osmedeus-base/workflow/general/subdomain.yaml</code>.</p> <pre><code># --snippet--\n\nsteps:\n- required:\n- \"{{Binaries}}/amass\"\n- \"{{Binaries}}/subfinder\"\n- \"{{Binaries}}/assetfinder\"\n- \"{{Binaries}}/findomain\"\ncommands:\n- \"timeout -k 1m {{amassTimeout}} {{Binaries}}/amass enum -config {{amassConfig}} -silent -nocolor -d {{Target}} -o {{Output}}/subdomain/{{Workspace}}-raw-amass.txt &gt; /dev/null 2&gt;&amp;1\"\n- \"{{Binaries}}/assetfinder -subs-only {{Target}} &gt; {{Output}}/subdomain/{{Workspace}}-assetfinder.txt\"\n# these 3 commands will run in parallels\n- commands:\n- \"{{Binaries}}/findomain -u {{Output}}/subdomain/{{Workspace}}-findomain.txt -t {{Target}} &gt; /dev/null 2&gt;&amp;1\"\n- \"{{Binaries}}/subfinder -d {{Target}} -t {{subfinderThreads}} -o {{Output}}/subdomain/{{Workspace}}-subfinder.txt &gt; /dev/null 2&gt;&amp;1\"\n# your new tool here\n- \"awesome-subdomain-enum -t {{Target}} &gt;&gt; {{Output}}/subdomain/sum-{{Workspace}}.txt\"\n\n# --snippet--\n</code></pre>"},{"location":"workflow/customize-your-own-workflow/#4-writing-a-new-flow","title":"4. Writing a new flow","text":"<p>Create a new flow file at <code>~/osmedeus-base/workflow/your-workflow.yaml</code> by customize the general flow file.</p> <p>If you want to use your own modules, you can change the <code>type: general</code> to <code>type: you-workflow</code> specify the folder of your modules.</p> <pre><code>name: your-workflow\ndesc: run subdomain enumeration and content discovery\ntype: general # this is mean module file will be read from `~/osmedeus-base/workflow/general/` folder\nvalidator: domain\n\nroutines:\n- modules:\n- subdomain\n- modules:\n- probing\n- modules:\n- dirbscan\n</code></pre> <p>Now you can run your workflow with this command <code>osmedeus scan -f your-workflow -t sample.com</code></p>"},{"location":"workflow/customize-your-own-workflow/#5-writing-a-new-module","title":"5. Writing a new module","text":""},{"location":"workflow/customize-your-own-workflow/#51-write-your-custom-module-your-moduleyaml","title":"5.1 Write your custom module <code>your-module.yaml</code>","text":"<p>Create a new module file at <code>~/osmedeus-base/workflow/general/your-module.yaml</code>.</p> <pre><code>name: your-module\ndesc: Finding archive URLs from Github\n\nreport:\nfinal:\n- \"{{Output}}/archive/{{Workspace}}-archive.txt\"\n\nparams:\n- httpFile: \"{{Output}}/probing/http-{{Workspace}}.txt\"\n- archiveTimeout: \"1h\"\n\npre_run:\n- CreateFolder(\"{{Output}}/archive\")\n\nsteps:\n- required:\n- \"{{Binaries}}/github-endpoints\"\n- \"{{Binaries}}/durl\"\n# @NOTE: github-endpoints require you to setup your own github token\ncommands:\n- \"{{Binaries}}/github-endpoints -raw -e -all -d {{Target}} -o {{Output}}/archive/raw-{{Workspace}}-archive.txt | {{Binaries}}/durl | shuf -n {{alimit}} &gt;&gt; {{Output}}/archive/{{Workspace}}-archive.txt\"\nscripts:\n- \"SortU('{{Output}}/archive/{{Workspace}}-archive.txt')\"\n</code></pre> <p>Now you can run your workflow with this command <code>osmedeus scan -f general -t sample.com</code></p>"},{"location":"workflow/customize-your-own-workflow/#52-add-a-new-module-to-exsting-workflow","title":"5.2 Add a new module to exsting workflow","text":"<p>Adding a new module file to the <code>general.yaml</code> flow file.</p> <pre><code>name: general\ndesc: run normal routine\ntype: general\nvalidator: domain\n\nroutines:\n- modules:\n- subdomain\n- modules:\n- probing\n- modules:\n- fingerprint\n- modules:\n- screenshot\n- modules:\n- spider\n- modules:\n- sto\n- archive\n- ipspace\n- modules:\n- vulnscan\n- modules:\n- dirbscan\n- modules:\n- portscan\n- modules:\n- your-module\n</code></pre>"},{"location":"workflow/default-workflow/","title":"Default Community workflow","text":""},{"location":"workflow/default-workflow/#anatomy-of-public-community-methodology","title":"Anatomy of Public Community methodology","text":""},{"location":"workflow/default-workflow/#list-all-flow-available","title":"List all flow available","text":"<pre><code>$ osmedeus workflow ls\n\nFound 11 available workflows at: /Users/j3ssie/osmedeus-base/workflow\n\n+----------------+-------------------------------------------------------------------------------------------------------+\n|   Flow Name    |                                              Description                                              |\n+----------------+-------------------------------------------------------------------------------------------------------+\n| cidr           | Scanning for CIDR File                                                                                |\n| domains        | Performing the default routine using the provided list of domains, but skipping subdomain enumeration |\n| extensive-vuln | Running extensive vuln scan                                                                           |\n| extensive      | Running extensive reconnaissance routine with in-depth module + bigger wordlists                      |\n| fast           | Performing a quick summary data analysis                                                              |\n| general        | Running default reconnaissance routine                                                                |\n| quick-cidr     | Scanning for CIDR file but focus on common HTTP Ports and skip banner grabbing                        |\n| subdomain-enum | Running subdomain enumeration and dns resolving only                                                  |\n| urls           | Performing vulnerability scan and directory scan using the provided Domains, URLs or IP Address       |\n| vuln-and-dirb  | Running vulnerability scan and directory scan on list of provded domains                              |\n| vuln           | Performing a rapid routine and conducting a vulnerability scan on it                                  |\n+----------------+-------------------------------------------------------------------------------------------------------+\n\nUsage:\n osmedeus scan -f [flowName] -t [target]\n\n------------------------------------------------------------\n\nFound 8 default modules at: /Users/j3ssie/osmedeus-base/workflow/default-modules\n\n+-----------------------+-------------------------------------------------------------------------------------------------------------------+\n|      Module Name      |                                                    Description                                                    |\n+-----------------------+-------------------------------------------------------------------------------------------------------------------+\n| brutefocing-subdomain | Running Subdomain Brutefocing on provided domain                                                                  |\n| cidr-probing          | Conducting common Port scanning then doing HTTP fingerprint technology and response with the supplied CIDR inputs |\n| content-discovery     | Running content discovery with the supplied inputs                                                                |\n| http-probing          | Running HTTP fingerprint technology and response with the supplied inputs                                         |\n| repo-scan             | Performing static vulnerability scan and secret scan on a git repo                                                |\n| spidering             | Crawling links in http site + scanning for secrets with trufflehog                                                |\n| subdomain-enum        | Running subdomain enumeration                                                                                     |\n| vuln-scan             | Run quick vulnerability scan with provided inputs                                                                 |\n+-----------------------+-------------------------------------------------------------------------------------------------------------------+\n\nModule Usage:\n osmedeus scan -m [moduleName] -t [target]\n\n\ud83d\udca1 For full help message, please run: osmedeus --hh or osmedeus scan --hh\n</code></pre>"},{"location":"workflow/git-scripts/","title":"Git Scripts","text":"<pre><code>const (\nRRSync         = \"RRSync\"\nClone          = \"Clone\"\nFClone         = \"FClone\"\nPushResult     = \"PushResult\"\nPushFolder     = \"PushFolder\"\nPullFolder     = \"PullFolder\"\nDiffCompare    = \"DiffCompare\"\nGitDiff        = \"GitDiff\"\nLoopGitDiff    = \"LoopGitDiff\"\nGetFileFromCDN = \"GetFileFromCDN\"\nGetWSFromCDN   = \"GetWSFromCDN\"\nDownloadFile   = \"DownloadFile\"\n// for gitlab API only\nCreateRepo      = \"CreateRepo\"\nDeleteRepo      = \"DeleteRepo\"\nDeleteRepoByPid = \"DeleteRepoByPid\"\nListProjects    = \"ListProjects\"\n)\n</code></pre>"},{"location":"workflow/io-utils/","title":"I/O Scripts","text":"<pre><code>const (\nSortU           = \"SortU\"\nSplitFile       = \"SplitFile\"\nAppend          = \"Append\"\nCopy            = \"Copy\"\nCreateFolder    = \"CreateFolder\"\nDeleteFile      = \"DeleteFile\"\nDeleteFolder    = \"DeleteFolder\"\nSplitFileByPart = \"SplitFileByPart\"\nFileLength      = \"FileLength\"\nIsFile          = \"IsFile\"\nEmptyDir        = \"EmptyDir\"\nEmptyFile       = \"EmptyFile\"\nReadLines       = \"ReadLines\"\n)\n</code></pre>"},{"location":"workflow/markdown-report/","title":"Markdown Report","text":""},{"location":"workflow/markdown-report/#basic-information","title":"Basic Information","text":"<p>The default storage location for all markdown templates, along with the default CSS style, is <code>$HOME/osmedeus-base/data/markdown/</code> To generate the HTML report, utilize the script provided within the following workflow.</p> <pre><code>GenMarkdownReport(\"{{Data}}/markdown/general-template.md\", \"{{Output}}/summary.html\")\n</code></pre>"},{"location":"workflow/markdown-report/#special-tags","title":"Special tags","text":""},{"location":"workflow/markdown-report/#content-tag","title":"<code>&lt;content /&gt;</code> tag","text":"<p>The content tag is employed to display the file's content using the <code>src</code> attribute. Additionally, by utilizing the <code>shortent=true</code> attribute, you can make the content collapsible.</p> <pre><code>&lt;content src=\"{{Output}}/subdomain/final-{{Workspace}}.txt\" shorten=true /&gt;\n\n&lt;content src=\"{{Output}}/linkfinding/links-{{Workspace}}.txt\" /&gt;\n</code></pre>"},{"location":"workflow/markdown-report/#scaninfo-tag","title":"<code>&lt;scanInfo /&gt;</code> tag","text":"<p>The scanInfo tag is utilized to generate scan information such as the target name, asset summary, and workflow name.</p>"},{"location":"workflow/markdown-report/#reports-tag","title":"<code>&lt;reports /&gt;</code> tag","text":"<p>The reports tag is employed to list all files within the <code>report:</code> section specific to the module.</p>"},{"location":"workflow/noti-scripts/","title":"Noti Scripts","text":"<pre><code>const (\n// noti for slack\nStartNoti   = \"StartNoti\"\nDoneNoti    = \"DoneNoti\"\nReportNoti  = \"ReportNoti\"\nDiffNoti    = \"DiffNoti\"\nCustomNoti  = \"CustomNoti\"\nNotiFile    = \"NotiFile\"\nWebHookNoti = \"WebHookNoti\"\n// noti for telegram\nTeleMess       = \"TeleMess\"\nTeleMessWrap   = \"TeleMessWrap\"\nTeleMessByFile = \"TeleMessByFile\"\nTeleSendFile   = \"TeleSendFile\"\n)\n</code></pre>"},{"location":"workflow/other-fields/","title":"Other Fields","text":""},{"location":"workflow/other-fields/#type-flow","title":"Type &amp; Flow","text":"<p>Type tag (Only avaliable flow file) is a folder name that will contains module file.</p> <p>For example if you run the scan <code>osmedeus scan -f general -t example.com</code> with module like below. It will look for module file <code>general/subdomain.yaml</code> and <code>general/probing.yaml</code> to run.</p> <pre><code>name: general\ndesc: run normal routine\ntype: general\nvalidator: domain\n\nroutines:\n- modules:\n- subdomain\n- modules:\n- probing\n\n- flow: 'slow' # override the type: general to look for module name slow/portscan.yaml\nmodules:\n- portscan\n</code></pre>"},{"location":"workflow/other-fields/#validator","title":"Validator","text":"<p>The validator tag allows you to check the format of the input first before actually running the scan.</p> <pre><code>validator: domain # -t example.com\n\n# or\n\nvalidator: cidr-file # -t file-of-cidr.txt\n</code></pre> <p>Here are some built-in formats that available in the Engine</p> <ul> <li> domain</li> <li> url</li> <li> ipv4</li> <li> cidr</li> </ul> <p>you can also add <code>-file</code> after each name to validate input as a file (e.g: <code>cidr-file</code>).</p>"},{"location":"workflow/other-fields/#reports","title":"Reports","text":"<p>This field shows a list of files that will show up on the Web UI modules.</p> <p>Also when call the cleaning script like <code>Cleaning(\"{{Output}}/subdomain/\")</code>. It will delete all the things in the subdomain folder except the file in the report section.</p> <p>When you're using <code>--resume</code> flag. This is also the file that the core engine check if the module is already run or not too.</p> <pre><code>name: dirbscan\ndesc: Run Dirbscan\n\nreport:\nfinal:\n- \"{{Output}}/directory/beautify-{{Workspace}}.txt\"\n- \"{{Output}}/directory/paths-{{Workspace}}.csv\"\n\nparams:\n- inputFile: \"{{Output}}/probing/http-{{Workspace}}.txt\"\n- wordlists: \"{{Data}}/wordlists/content/small.txt\"\n</code></pre>"},{"location":"workflow/parameters/","title":"Parameters","text":"<p>Parameters will be replace when the routine running.</p>"},{"location":"workflow/parameters/#default-parameters-that-built-in-the-engine","title":"Default Parameters that built-in the Engine","text":"Default variable Assume you use default config at <code>~/.osmedeus/config.yaml</code> <code>{{Workspaces}}</code> Workspaces path <code>~/workspaces-osmedeus/</code> <code>{{Storages}}</code> Storages path <code>~/.osmedeus/storages</code> <code>{{Binaries}}</code> Binary path <code>~/osmedeus-base/binaries</code> <code>{{Data}}</code> Data path <code>~/osmedeus-base/data</code> <code>{{Scripts}}</code> Script path <code>~/osmedeus-base/scripts</code> <code>{{BaseFolder}}</code> Base path <code>~/osmedeus-base</code> <code>{{Workflow}}</code> Workflow path <code>~/osmedeus-base/workflow</code> <code>{{Cloud}}</code> Cloud path <code>~/osmedeus-base/cloud</code>"},{"location":"workflow/parameters/#parameters-generated-from-input","title":"Parameters generated from input","text":"Dynamic variable E.g command: <code>osmedeus scan -t example.com</code> <code>{{Target}}</code> <code>example.com</code> <code>{{Workspace}}</code> just like <code>{{Target}}</code> but strip out <code>/</code> char  to <code>_</code>. For example <code>example.com/a/b --&gt; example.com_a_b</code> <code>{{Output}}</code> <code>{{Output}} == {{Workspaces}} + {{Workspace}}</code> <code>{{Org}}</code> <code>example</code> <code>{{custom}}</code> Extra param take from <code>--params 'custom=anything'</code>"},{"location":"workflow/scripts/","title":"Scripts","text":"<p> A Script is an alias for the Golang function that you can call from YAML Workflow that allows you to do complex logic which is native support from the Osmedeus core engine. </p> <p></p>"},{"location":"workflow/scripts/#core-scripts","title":"Core Scripts","text":"<p>Currently, I don't have time to fully document these scripts, but if you understand golang code you can read what it does from here</p> <pre><code>/* File to store all the script for better reference */\n\n\nconst (\nCleaning         = \"Cleaning\"\nCleanAmass       = \"CleanAmass\"\nCleanRustScan    = \"CleanRustScan\"\nCleanGoBuster    = \"CleanGoBuster\"\nCleanMassdns     = \"CleanMassdns\"\nCleanSWebanalyze = \"CleanSWebanalyze\"\nCleanJSONDnsx    = \"CleanJSONDnsx\"\nCleanWebanalyze  = \"CleanWebanalyze\"\nCleanArjun       = \"CleanArjun\"\nGenNucleiReport  = \"GenNucleiReport\"\nCleanJSONHttpx   = \"CleanJSONHttpx\"\nCleanFFUFJson    = \"CleanFFUFJson\"\n)\n\nconst (\n// noti for slack\nStartNoti   = \"StartNoti\"\nDoneNoti    = \"DoneNoti\"\nReportNoti  = \"ReportNoti\"\nDiffNoti    = \"DiffNoti\"\nCustomNoti  = \"CustomNoti\"\nNotiFile    = \"NotiFile\"\nWebHookNoti = \"WebHookNoti\"\n// noti for telegram\nTeleMess       = \"TeleMess\"\nTeleMessWrap   = \"TeleMessWrap\"\nTeleMessByFile = \"TeleMessByFile\"\nTeleSendFile   = \"TeleSendFile\"\n)\n\nconst (\nExecCmd           = \"ExecCmd\"\nExecCmdB          = \"ExecCmdB\"\nExecCmdWithOutput = \"ExecCmdWithOutput\"\nExecContain       = \"ExecContain\"\nSleep           = \"Sleep\"\nExit            = \"Exit\"\nCastToInt       = \"CastToInt\"\nStripSlash      = \"StripSlash\"\nPrintf          = \"Printf\"\nCat             = \"Cat\"\nSortU           = \"SortU\"\nSplitFile       = \"SplitFile\"\nAppend          = \"Append\"\nCopy            = \"Copy\"\nCreateFolder    = \"CreateFolder\"\nDeleteFile      = \"DeleteFile\"\nDeleteFolder    = \"DeleteFolder\"\nSplitFileByPart = \"SplitFileByPart\"\nFileLength      = \"FileLength\"\nIsFile          = \"IsFile\"\nEmptyDir        = \"EmptyDir\"\nEmptyFile       = \"EmptyFile\"\nReadLines       = \"ReadLines\"\n)\n\nconst (\nTotalSubdomain     = \"TotalSubdomain\"\nTotalDns           = \"TotalDns\"\nTotalScreenShot    = \"TotalScreenShot\"\nTotalTech          = \"TotalTech\"\nTotalVulnerability = \"TotalVulnerability\"\nTotalArchive       = \"TotalArchive\"\nTotalLink          = \"TotalLink\"\nTotalDirb          = \"TotalDirb\"\nCreateReport       = \"CreateReport\"\n)\n</code></pre>"},{"location":"workflow/use-your-own-wordlists/","title":"Use your own wordlists","text":"<p>You can start your own wordlists to brute force dns and directory at <code>~/osmedeus-base/workflow</code> Table below is how I like to structure it but you can edit any file if you want.</p>"},{"location":"workflow/use-your-own-wordlists/#directory","title":"Directory","text":"Directory Wordlists Description <code>~/osmedeus-base/data/content/small.txt</code> Use for Directory scan of general module <code>~/osmedeus-base/data/content/medium.txt</code> Use for Directory scan of medium module <code>~/osmedeus-base/data/content/big.txt</code> Use for Directory scan of slow module"},{"location":"workflow/use-your-own-wordlists/#dns","title":"Dns","text":"Dns Wordlists Description <code>~/osmedeus-base/data/dns/shorts.txt</code> Use for Dns Brute-forcing module <code>~/osmedeus-base/data/resolvers.txt</code> Resolver list for Dns Brute-forcing module"}]}